using CarShop.Enums;
using CarShop.Models;
using Npgsql;
using CarShop.Database;

namespace CarShop.Services;


public class AuthService
{
    private readonly BbConnection _db;

    public AuthService(BbConnection db)
    {
        _db = db;
    }

    public AuthService()
    {
    }

    private readonly List<User> _users = new();
    public User? LoggedInUser { get; private set; }

    public void Register()
    {
        Console.Write("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ");
        string username = Console.ReadLine()!;
        Console.Write("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ");
        string password = Console.ReadLine()!;
        Console.Write("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å (1 ‚Äî –ö–ª–∏–µ–Ω—Ç, 2 ‚Äî –ê–¥–º–∏–Ω): ");

        int roleChoice;
        while (true)
        {
            var input = Console.ReadLine();
            if (string.IsNullOrWhiteSpace(input))
            {
                roleChoice = 1;
                break;
            }

            if (int.TryParse(input, out roleChoice) && (roleChoice == 1 || roleChoice == 2))
                break;

            Console.Write("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ 1 –¥–ª—è –ö–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ 2 –¥–ª—è –ê–¥–º–∏–Ω–∞: ");
        }

        UserRole role = roleChoice == 2 ? UserRole.Admin : UserRole.Client;

        //_users.Add(new User(username, password, role, 100000)); // –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å 100000 –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
        using var conn = _db.GetConnection();
        using var sql2 =
            new NpgsqlCommand(
                "INSERT INTO users(username,password,role,balance ) VALUES(@name,@password,@role,@balans)", conn);
        sql2.Parameters.AddWithValue("@name", username);
        sql2.Parameters.AddWithValue("@password", password);
        sql2.Parameters.AddWithValue("@role", roleChoice);
        sql2.Parameters.AddWithValue("@balans", 100000);
        sql2.ExecuteNonQuery();
        Console.WriteLine("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!");
    }

    public void Login()
    {
        Console.Write("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ");
        string username = Console.ReadLine()!;
        Console.Write("–ü–∞—Ä–æ–ª—å: ");
        string password = Console.ReadLine()!;

        try
        {
            using var conn = _db.GetConnection();
            using var sql =
                new NpgsqlCommand(
                    "SELECT id,username, password, role, balance FROM users WHERE username = @u AND password = @p LIMIT 1",
                    conn);
            sql.Parameters.AddWithValue("@u", username);
            sql.Parameters.AddWithValue("@p", password);

            using var reader = sql.ExecuteReader();
            if (!reader.Read())
            {
                Console.WriteLine("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞!");
                return;
            }

            int index = reader.GetInt32(0);
            string usern = reader.GetString(1);
            string role = reader.GetString(3);
            decimal balance = reader.GetDecimal(4);

            UserRole rl = new UserRole();

            if (role == "1")
                rl = UserRole.Client;
            else if (role == "2")
                rl = UserRole.Admin;

            LoggedInUser = new User(index++, usern, password, rl, balance);
            Console.WriteLine($"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {LoggedInUser.Username} ({LoggedInUser.Role})!");
        }
        catch (Exception ex)
        {
            Console.WriteLine($" –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ: {ex.Message}");
        }
    }

    public void Logout()
    {
        if (LoggedInUser != null)
        {
            Console.WriteLine($"üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è, {LoggedInUser.Username}!");
            LoggedInUser = null;
        }
        else
        {
            Console.WriteLine("‚ö†Ô∏è –í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É.");
        }
    }

    public bool IsAdmin() => LoggedInUser?.Role == UserRole.Admin;

    public void Deposit()
    {
        //Console.WriteLine($"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {Balance}");
        Console.WriteLine("–ü–æ–ø–æ–ª–Ω–∏–µ—Ç –±–∞–ª–∞–Ω—Å:");

        decimal newBalance;
        while (true)
        {
            var input = Console.ReadLine();
            if (decimal.TryParse(input, out newBalance) && newBalance > 0)
                break;
            Console.WriteLine("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:");
        }

        using var conn = _db.GetConnection();
        decimal updateb = LoggedInUser.Balance + newBalance;
        using var sql = new NpgsqlCommand("UPDATE users SET balance =  @b WHERE id = @id", conn);
        sql.Parameters.AddWithValue("@b", updateb);
        sql.Parameters.AddWithValue("@id", LoggedInUser.Id);
        sql.ExecuteNonQuery();

        LoggedInUser.Balance += newBalance;

        Console.WriteLine($"–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å : {LoggedInUser.Balance} kzt");
    }


    public void ShowHistory()
    {
        using var conn = _db.GetConnection();
        using var sql = new NpgsqlCommand("SELECT * FROM orders WHERE customer_id = @id", conn);
        sql.Parameters.AddWithValue("@id", LoggedInUser.Id);

        using var reader = sql.ExecuteReader();

        if (!reader.HasRows)
        {
            Console.WriteLine("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫.");
            return;
        }

        Console.WriteLine("–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫:");

        int index = 1;
        while (reader.Read())
        {
            int brand = reader.GetInt32(0);
            int model = reader.GetInt32(1);
            DateTime date = reader.GetDateTime(3);

            Console.WriteLine($"{index++}. {brand} {model}-({date:dd.MM.yyyy})");
        }
    }
}